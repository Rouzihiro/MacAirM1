-- In `lua/config/whichkey.lua`

local wk = require("which-key")

wk.setup({
  preset = "classic", -- Set the preset style for which-key
  delay = function(ctx)
    return ctx.plugin and 0 or 200
  end,
  filter = function(mapping)
    return true
  end,
  notify = true, -- Show a warning when issues are detected with your mappings
  triggers = {
    { "<auto>", mode = "nxsot" },
  },
  defer = function(ctx)
    return ctx.mode == "V" or ctx.mode == "<C-V>"
  end,
  plugins = {
    marks = true, -- Shows a list of your marks on ' and `
    registers = true, -- Shows your registers on " in NORMAL or <C-r> in INSERT mode
    spelling = {
      enabled = true, -- Show WhichKey when pressing z= to select spelling suggestions
      suggestions = 20, -- Number of suggestions shown in the list
    },
    presets = {
      operators = true, -- Help for operators like d, y, ...
      motions = true, -- Help for motions
      text_objects = true, -- Help for text objects triggered after entering an operator
      windows = true, -- Default bindings on <c-w>
      nav = true, -- Misc bindings to work with windows
      z = true, -- Bindings for folds, spelling, etc.
      g = true, -- Bindings prefixed with g
    },
  },
  win = {
    no_overlap = true,
    padding = { 1, 2 }, -- Extra window padding [top/bottom, right/left]
    title = true,
    title_pos = "center",
    zindex = 1000,
  },
  layout = {
    width = { min = 20 }, -- Min and max width of the columns
    spacing = 3, -- Spacing between columns
  },
  keys = {
    scroll_down = "<c-d>", -- Binding to scroll down inside the popup
    scroll_up = "<c-u>", -- Binding to scroll up inside the popup
  },
  sort = { "local", "order", "group", "alphanum", "mod" }, -- Sorting order
  expand = 0, -- Expand groups when <= n mappings
  replace = {
    key = {
      function(key)
        return require("which-key.view").format(key)
      end,
    },
    desc = {
      { "<Plug>%(?(.*)%)?", "%1" },
      { "^%+", "" },
      { "<[cC]md>", "" },
      { "<[cC][rR]>", "" },
      { "<[sS]ilent>", "" },
      { "^lua%s+", "" },
      { "^call%s+", "" },
      { "^:%s*", "" },
    },
  },
  icons = {
    breadcrumb = "»", -- Symbol used in the command line area that shows your active key combo
    separator = "➜", -- Symbol used between a key and its label
    group = "+", -- Symbol prepended to a group
    ellipsis = "…",
    mappings = true, -- Enable mapping icons
    rules = {}, -- Custom rules for icons
    colors = true, -- Use highlights from mini.icons
    keys = {
      Up = " ",
      Down = " ",
      Left = " ",
      Right = " ",
      C = "󰘴 ",
      M = "󰘵 ",
      D = "󰘳 ",
      S = "󰘶 ",
      CR = "󰌑 ",
      Esc = "󱊷 ",
      ScrollWheelDown = "󱕐 ",
      ScrollWheelUp = "󱕑 ",
      NL = "󰌑 ",
      BS = "󰁮",
      Space = "󱁐 ",
      Tab = "󰌒 ",
      F1 = "󱊫",
      F2 = "󱊬",
      F3 = "󱊭",
      F4 = "󱊮",
      F5 = "󱊯",
      F6 = "󱊰",
      F7 = "󱊱",
      F8 = "󱊲",
      F9 = "󱊳",
      F10 = "󱊴",
      F11 = "󱊵",
      F12 = "󱊶",
    },
  },
  show_help = true, -- Show a help message in the command line for using WhichKey
  show_keys = true, -- Show the currently pressed key and its label as a message in the command line
  disable = {
    ft = {},
    bt = {},
  },
  debug = false, -- Enable wk.log in the current directory
})

-- Define your key mappings
wk.register({
  ["<leader>"] = {
    t = {
      r = { "<cmd>NvimTreeToggle<cr>", "Toggle File Explorer" },
      name = "File Explorer", -- Group name for the file explorer commands
    },
    f = {
      b = { "<cmd>Telescope buffers<cr>", "Buffers" },
      f = { "<cmd>Telescope find_files<cr>", "Find File" },
      g = { "<cmd>Telescope live_grep<cr>", "Live Grep" },
      name = "Find",
      t = { "<cmd>Telescope tags<cr>", "Tags" }
    },
    g = {
      b = { "<cmd>Git blame<cr>", "Git Blame" },
      g = { "<cmd>Git<cr>", "Git Status" },
      name = "Git"
    },
    l = {
      a = { "<cmd>lua vim.lsp.buf.code_action()<cr>", "Code Action" },
      d = { "<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<cr>", "Show Diagnostics" },
      f = { "<cmd>lua vim.lsp.buf.formatting()<cr>", "Format" },
      name = "LSP",
      r = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename" }
    },
    q = { "<cmd>q<cr>", "Quit Neovim" },
    s = { "<cmd>w<cr>", "Save File" },
    t = {
      f = { "<cmd>TestFile<cr>", "Run Test File" },
      name = "Tests",
      r = { "<cmd>TestRun<cr>", "Run Test" }
    }
  },
}, { prefix = "<leader>" })

