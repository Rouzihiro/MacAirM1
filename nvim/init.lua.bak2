-- Initialize packer.nvim
require('packer').startup(function(use)
  -- Manage packer.nvim itself
  use 'wbthomason/packer.nvim'

  -- Tokyonight Theme
  use 'folke/tokyonight.nvim'


require('tokyonight').setup({
    plugins = { markdown = true },
})

 -- Table mode plugin
use 'dhruvasagar/vim-table-mode'

vim.cmd [[
        let g:table_mode_auto_enable = 1
      ]]

-- Using init.lua
vim.g.table_mode_corner_corner = '+'
vim.g.table_mode_corner_joint = '+'
vim.g.table_mode_corner_end = '+'

    use 'honza/vim-snippets' 


    -- nvim-tree for file explorer
  use 'nvim-tree/nvim-tree.lua'

-- disable netrw at the very start of your init.lua
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

-- optionally enable 24-bit colour
vim.opt.termguicolors = true

-- empty setup using defaults
require("nvim-tree").setup()

-- OR setup with some options
require("nvim-tree").setup({
    sort = {
        sorter = "name",
        folders_first = true,
        files_first = false,
  },
  renderer = {
    group_empty = true,
  },
  filters = {
    dotfiles = false,
  },
})

-- Set the leader key (if not already set)
vim.g.mapleader = ' ' -- Typically the space bar is used as the leader key

-- Map <leader>t to toggle nvim-tree
vim.api.nvim_set_keymap('n', '<leader>t', ':NvimTreeToggle<CR>', { noremap = true, silent = true })



  -- nvim-treesitter for better syntax highlighting
  use 'nvim-treesitter/nvim-treesitter'

  -- Alpha - Start screen
  use 'goolord/alpha-nvim'

  -- Bufferline - Buffer tabs
  use 'akinsho/bufferline.nvim'

  -- Lualine - Status line
  use 'nvim-lualine/lualine.nvim'

  -- Indent-Blankline - Show indentation guides
  use 'lukas-reineke/indent-blankline.nvim'

  -- Web Devicons - Icons for various plugins
  use 'kyazdani42/nvim-web-devicons'

  -- Nvim-Autopairs - Automatically close pairs
  use 'windwp/nvim-autopairs'

  -- Nvim-Surround - Manage surroundings (like brackets)
  use 'kylechui/nvim-surround'

  -- Comment - Easily comment code
  use 'numToStr/Comment.nvim'

  -- Nvim-Treesitter Context Comment String - Context-aware comments
  use 'JoosepAlviste/nvim-ts-context-commentstring'

  -- LSP Config - LSP support
  use 'neovim/nvim-lspconfig'

  -- Nvim-Cmp - Autocompletion framework
  use 'hrsh7th/nvim-cmp'

  -- Cmp-Nvim-LSP - LSP source for nvim-cmp
  use 'hrsh7th/cmp-nvim-lsp'

  -- Cmp-Buffer - Buffer source for nvim-cmp
  use 'hrsh7th/cmp-buffer'

  -- LuaSnip - Snippet engine
  use 'L3MON4D3/LuaSnip'

  -- Cmp-Luasnip - Luasnip source for nvim-cmp
  use 'saadparwaiz1/cmp_luasnip'

  -- Friendly-Snippets - Collection of snippets
  use 'rafamadriz/friendly-snippets'

  -- Lspkind - VSCODE-like pictograms for completion
  use 'onsails/lspkind-nvim'

  -- Neodev - Neovim Lua development plugin
  use 'folke/neodev.nvim'

  -- Telescope - Fuzzy finder
  use 'nvim-telescope/telescope.nvim'

  -- Telescope FZF Native - FZF sorter for telescope
  use { 'nvim-telescope/telescope-fzf-native.nvim', run = 'make' }

  -- Auto-Session - Manage Neovim sessions
  use 'rmagatti/auto-session'

  -- Todo-Comments - Highlight TODO comments
  use 'folke/todo-comments.nvim'

  -- Dressing - Improve UI for various input dialogs
  use 'stevearc/dressing.nvim'

  -- Nui - Neovim UI components
  use 'MunifTanjim/nui.nvim'

  -- Fine-Cmdline - Command-line UI
  use 'VonHeikemen/fine-cmdline.nvim'

  -- Plenary - Lua functions used by many plugins
  use 'nvim-lua/plenary.nvim'
end)

-- General settings
vim.opt.background = "dark"
vim.cmd('colorscheme tokyonight')
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.syntax = "enable"
vim.opt.mouse = "a"
vim.opt.clipboard = "unnamedplus"
vim.opt.tabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.smartindent = true
vim.opt.wrap = true
vim.opt.sessionoptions:append("localoptions")

-- Transparent background
vim.cmd([[
  hi Normal guibg=NONE ctermbg=NONE
  hi NonText guibg=NONE ctermbg=NONE
]])

-- Treesitter configuration
require('nvim-treesitter.configs').setup {
  ensure_installed = "all",
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  },
}

-- Lualine configuration
require('lualine').setup {
  options = {
    theme = 'tokyonight',
    section_separators = '',
    component_separators = '',
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {'filename'},
    lualine_x = {'fileformat', 'filetype', 'encoding'},
    lualine_y = {'progress'},
    lualine_z = {'location'},
  },
}

-- Nvim-Autopairs configuration
require('nvim-autopairs').setup {}

-- Nvim-Cmp configuration
local cmp = require'cmp'

cmp.setup({
  snippet = {
    expand = function(args)
      require('luasnip').lsp_expand(args.body)
    end,
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<Tab>'] = cmp.mapping.confirm({ select = true }),
    ['<C-e>'] = cmp.mapping.close(),
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
    { name = 'buffer' },
    { name = 'path' },
  }),
})

-- Nvim-Lspconfig configuration
require('lspconfig').pyright.setup{}
require('lspconfig').tsserver.setup{}

-- Telescope configuration
require('telescope').setup {
  defaults = {
    prompt_prefix = "> ",
    selection_caret = "> ",
    layout_strategy = "horizontal",
    layout_config = {
      horizontal = { preview_width = 0.55 },
    },
  },
}

-- Auto-Session configuration
require('auto-session').setup {
  log_level = 'info',
  auto_save_enabled = true,
  auto_restore_enabled = true,
}

-- Todo-Comments configuration
require('todo-comments').setup {
  signs = true,
  keywords = {
    FIX = { icon = '', color = 'error' },
    TODO = { icon = '', color = 'info' },
    HACK = { icon = '', color = 'warning' },
  },
}

-- Dressing configuration
require('dressing').setup {}

-- Fine-Cmdline configuration
require('fine-cmdline').setup {}



